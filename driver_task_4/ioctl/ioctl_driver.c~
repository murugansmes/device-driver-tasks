#include<linux/module.h>
#include<linux/init.h>
#include<linux/kernel.h>
#include<asm/uaccess.h>
#include<linux/fs.h>
#include "ioctl_header.h"
MODULE_LICENSE("GPL");
MODULE_AUTHOR("MURUGAN S");
MODULE_DESCRIPTION("IOCTL DRIVER");

#define SUCCESS 0
#define DEVICE_NAME "ioctl_dev"
#define BUF_LEN 80

static int Device_Open=0;
static char Message[BUF_LEN];
static char *Message_Ptr;

static int device_open(struct inode *inode,struct file *file)
{
	if(Device_Open)
		{
			return -EBUSY;
		}
	Device_Open++;
	Message_Ptr=Message;
	return SUCCESS;
}

static int device_release(struct inode *inode,struct file *file)
{
	printk("device_release(%p,%p)\n",inode,file);
	Device_Open--;
	return 0;
}

static ssize_t device_read(struct file *file,char *buffer,size_t length,loff_t *offset)
{
	int bytes_read=0;
	printk("device_read(%p,%p,%zu)\n",file,buffer,length);
	if(*Message_Ptr==0)
	{
	return 0;
	}
	else
	{
	while(length && *Message_Ptr)
	{
		put_user(*(Message_Ptr++),buffer++);
		length--;
		bytes_read++;
	}
	printk("Read %d bytes,%zu left\n",bytes_read,length);
	return bytes_read;	
	}
}


static ssize_t device_write(struct file *file,const char *buffer,size_t length,loff_t *offset)
{
	int i;
	printk("device_write(%p,%s,%zu)",file,buffer,length);
	
	for(i=0;i<length && i<BUF_LEN;i++)
	{
		get_user(Message[i],buffer+i);
	}
	Message_Ptr=Message;
	return i;
}

long device_ioctl(struct file *file,unsigned int ioctl_num,unsigned long ioctl_param)
{
	int i;
	char *temp;
	char ch;
	switch(ioctl_num)
	{
		case IOCTL_SET_MSG:
			temp=(char *) ioctl_param;
			get_user(ch,temp);
			for(i=0;ch && i<BUF_LEN;i++,temp++)
			{
				get_user(ch,temp);
			}
			device_write(file,(char *) ioctl_param,i,0);
			break;
		
		case IOCTL_GET_MSG:
			i=device_read(file,(char *) ioctl_param,99,0);
			
			put_user('\0',(char *) ioctl_param+i);
			break;
		
		case IOCTL_GET_NTH_BYTE:
			return Message[ioctl_param];
			break;
	}
	return SUCCESS;
}

struct file_operations Fops={
	.read			= device_read,
	.write			= device_write,
	.unlocked_ioctl		= device_ioctl,
	.open			= device_open,
	.release		= device_release,
	};
int init_module(void)
{
 	 int ret_val;
	 ret_val=register_chrdev(MAJOR_NUM,DEVICE_NAME,&Fops);
 	
 	 if(ret_val<0)
 	 {
 	 	printk("%s failed with %d\n","Sorry,registering the character device",ret_val);
 	 	return ret_val;
       	 }
       	printk("%s The major device number is %d.\n","Registration is success",MAJOR_NUM);
	return 0;
}

void cleanup_module(void)
{
	unregister_chrdev(MAJOR_NUM,DEVICE_NAME);
	printk("Successfully unregistered the driver.\n");
}



