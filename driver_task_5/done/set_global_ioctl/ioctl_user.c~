/***********************************************************************

*   Project Name : ioctl_user.c
*
*   Author       : MURUGAN S
*                  murugan.s@fossilshale.com
*   Date         : 27/6/2017
*
*   Description  : User space application that makes ioctl calls to set and read global variable of a sdriver.
*
*   Copyright Â© Fossilshale Embedded Technologies Pvt. Ltd.

***********************************************************************/

/**********************************************************************
*   Header Files Inclusion 
***********************************************************************/
#include "ioctl_header.h"
#include<fcntl.h>
#include<unistd.h>
#include<sys/ioctl.h>
#include<stdio.h>
#include<stdlib.h>
/**********************************************************************
*   Macro Substitutions
***********************************************************************/

/**********************************************************************
*   Global variable declerations 
***********************************************************************/
static int var;
/***********************************************************************
*   Function Prototypes 
************************************************************************/
int ioctl_set_msg(int file_desc,char *message);
int ioctl_get_msg(int file_desc);
/**********************************************************************

*   Function    : ioctl_set_msg().
*
*   Description : Function to set global variable of driver using ioctl call.
*
*   Parameters  : an integer, pointer which holds the message to be sent.
*
*   Return value: none.

***********************************************************************/

int test_ioctl_set_variable(int file_desc,int var)
{
	int ret_val;
	ret_val=ioctl(file_desc,TEST_IOCTL_SET_VARIABLE,var);
	if(ret_val<0)
	{
		printf("	ioctl_set_msg failed :%d\n",ret_val);
		exit(-1);
	}
	return 0;
}
/**********************************************************************

*   Function    : ioctl_get_msg().
*
*   Description : Function to get global variable value from kernel using an ioctl call.
*
*   Parameters  : an integer.
*
*   Return value: none.

***********************************************************************/
int test_ioctl_get_variable(int file_desc)
{
	int ret_val;
	//char message[100];
	
	ret_val=ioctl(file_desc,TEST_IOCTL_GET_VARIABLE,var);
	if(ret_val<0)
	{
		printf("	ioctl_get_msg failed:%d\n",ret_val);
		exit(-1);
	}
	printf("\n\n\t\tThe value of the global variable is	:%d\n\n",var);
	return 0;
}

void main()
{
	
	int file_desc,ret_val,i=0,Option;
	char *msg,y;
	msg=malloc(10*sizeof(char));
	system("clear");
	file_desc=open(DEVICE_FILE_NAME,0);
	if(file_desc<0)
	{
		printf("	Cant open device file:%s\n",DEVICE_FILE_NAME);
		exit(-1);
	}
	here:
	printf("\t\tCHOOSE THE ACTION TO BE PERFORMED:\n\n\t\t1)SET GLOBAL VARIABLE. 2)READ GLOBAL VARIABLE.\n\n\t\tOption:");
	scanf("%d",&Option);
	switch(Option){
	case 1:{
	printf("\t\tENTER THE VALUE OF THE GLOBAL VARIABLE TO BE SET.");
	scanf("%d",&var);
	test_ioctl_set_variable(file_desc,var);break;
	}
	case 2:test_ioctl_get_variable(file_desc);break;
	default:printf("\n\t\tINVALID CHOICE!");break;
	}
	printf("\n\t\tDo you want to continue(y/n)?:");
	scanf(" %c",&y);
	if(y=='y')
	{
		y='1';
		system("clear");
		goto here;
	}
	close(file_desc);
}
